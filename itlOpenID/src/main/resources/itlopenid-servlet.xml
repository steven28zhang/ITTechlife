<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	 http://www.springframework.org/schema/beans/spring-beans-3.1.xsd 
	 http://www.springframework.org/schema/context 
	 http://www.springframework.org/schema/context/spring-context-3.1.xsd
	 http://www.springframework.org/schema/mvc 
	 http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd">

	<!-- The controllers are autodetected POJOs labeled with the @Controller 
		annotation. -->
	<context:component-scan base-package="com.sxw.itl.openid">
	    <!-- 
		use-default-filters="false">
		<context:include-filter expression="org.springframework.stereotype.Controller"
			type="annotation" />
		<context:include-filter
			expression="org.springframework.web.bind.annotation.ControllerAdvice"
			type="annotation" />
		 -->
	</context:component-scan>
	

	<!-- Turns on support for mapping requests to Spring MVC @Controller methods 
		Also registers default Formatters and Validators for use across all @Controllers -->
	<mvc:annotation-driven/>
	<!-- 
	<mvc:annotation-driven conversion-service="applicationConversionService"
		message-codes-resolver="messageCodesResolver">
		<mvc:message-converters>
			<bean id="jacksonMessageConverter"
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	 -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources 
	<context:property-placeholder/>

	<mvc:resources location="/, classpath:/META-INF/web-resources/"
		mapping="/resources/**" />

	<util:properties id="deploymHealth"
		location="classpath:deploy_mHealth.properties" />
		-->
	<!-- Allows for mapping the DispatcherServlet to "/" by forwarding static 
		resource requests to the container's default Servlet -->
	<mvc:default-servlet-handler />

	<!-- Register "global" interceptor beans to apply to all registered HandlerMappings -->
	<!-- 
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.theme.ThemeChangeInterceptor" />
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"
			p:paramName="lang" />
		<bean class="org.springframework.web.servlet.mvc.WebContentInterceptor">
			<property name="cacheSeconds" value="0" />
			<property name="useExpiresHeader" value="true" />
			<property name="useCacheControlHeader" value="true" />
			<property name="useCacheControlNoStore" value="true" />
		</bean>
	</mvc:interceptors>
 -->
	<!-- Selects a static view for rendering without the need for an explicit 
		controller -->
	<!-- 
	<mvc:view-controller path="/unauthorized" />
	<mvc:view-controller path="/" view-name="index" />
	<mvc:view-controller path="/uncaughtException" />
	<mvc:view-controller path="/resourceNotFound" />
	<mvc:view-controller path="/dataAccessFailure" />
 -->
	<!-- Resolves localized messages*.properties and application.properties 
		files in the application to allow for internationalization. The messages*.properties 
		files translate Roo generated messages which are part of the admin interface, 
		the application.properties resource bundle localizes all application specific 
		messages such as entity names and menu items. -->
	<!-- 
	<bean
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource"
		id="messageSource" p:basenames="WEB-INF/i18n/messages,WEB-INF/i18n/application"
		p:fallbackToSystemLocale="false" />
 -->
	<!-- Store preferred language configuration in a cookie -->
	<!-- 
	<bean class="org.springframework.web.servlet.i18n.CookieLocaleResolver"
		id="localeResolver" p:cookieName="locale" />
 -->
	<!-- Resolves localized <theme_name>.properties files in the classpath to 
		allow for theme support -->
	<!-- 
	<bean
		class="org.springframework.ui.context.support.ResourceBundleThemeSource"
		id="themeSource" />
 -->
	<!-- Store preferred theme configuration in a cookie -->
	<!-- 
	<bean class="org.springframework.web.servlet.theme.CookieThemeResolver"
		id="themeResolver" p:cookieName="theme" p:defaultThemeName="standard" />
 -->
	<!-- Message codes resolver used for binding errors, with a specified prefix -->
	<!-- 	
	<bean class="org.springframework.validation.DefaultMessageCodesResolver"
		id="messageCodesResolver" p:prefix="validation." />
 -->
	<!-- This bean resolves specific types of exceptions to corresponding logical 
		- view names for error views. The default behaviour of DispatcherServlet 
		- is to propagate all exceptions to the servlet container: this will happen 
		- here with all other types of exceptions. <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver" 
		p:defaultErrorView="uncaughtException"> <property name="exceptionMappings"> 
		<props> <prop key=".DataAccessException">dataAccessFailure</prop> <prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop> 
		<prop key=".TypeMismatchException">resourceNotFound</prop> <prop key=".MissingServletRequestParameterException">resourceNotFound</prop> 
		</props> </property> <property name="order"> <value>1</value> </property> 
		</bean> -->
	<!-- 
	<bean
		class="org.springframework.web.servlet.handler.HandlerExceptionResolverComposite">
		<property name="exceptionResolvers">
			<list>
				<bean class="com.covisint.itms.web.common.ex.JsonExceptionResolver" />
				<bean
					class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"
					p:defaultErrorView="uncaughtException">
					<property name="exceptionMappings">
						<props>
							<prop key=".DataAccessException">dataAccessFailure</prop>
							<prop key=".NoSuchRequestHandlingMethodException">resourceNotFound</prop>
							<prop key=".TypeMismatchException">resourceNotFound</prop>
							<prop key=".MissingServletRequestParameterException">resourceNotFound</prop>
						</props>
					</property>
				</bean>
			</list>
		</property>
		<property name="order">
			<value>-1</value>
		</property>
	</bean>
 -->
	<!-- Enable this for integration of file upload functionality -->
	<!-- 
	<bean
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
		id="multipartResolver" />

	<bean class="org.springframework.web.servlet.view.UrlBasedViewResolver"
		id="tilesViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles2.TilesView" />
	</bean>

	<bean class="org.springframework.web.servlet.view.tiles2.TilesConfigurer"
		id="tilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/layouts/layouts.xml</value>
	 -->
	 			
				<!-- Scan views directory for Tiles configurations -->
<!-- 
				<value>/WEB-INF/views/**/views.xml</value>
			</list>
		</property>
	</bean>

	<bean class="com.covisint.itms.web.ApplicationConversionServiceFactoryBean"
		id="applicationConversionService" />
	 -->


<bean id="viewResolver"
class="org.springframework.web.servlet.view.UrlBasedViewResolver">
<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
<property name="prefix" value="/WEB-INF/jsp/"/>
<property name="suffix" value=".jsp"/>
</bean>

</beans>
